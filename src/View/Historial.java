/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

/**
 *
 * @author Christopher
 */
import javax.swing.*;
import Controller.HistorialController;
import Model.Transaccion;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.table.DefaultTableModel;

public class Historial extends javax.swing.JFrame {

    /**
     * Creates new form Historial
     */
     private JTextField idCuentaField;
    private JButton mostrarButton;
    private JTable transaccionesTable;
    private DefaultTableModel transaccionesTableModel;
    private HistorialController controller;

    public Historial(HistorialController controller) {
        this.controller = controller;
        initComponent();
    }

    private void initComponent() {
        idCuentaField = new JTextField(20);
        mostrarButton = new JButton("Mostrar Historial");
        transaccionesTable = new JTable();
        transaccionesTableModel = new DefaultTableModel();

        // Configurar el modelo de la tabla
        transaccionesTableModel.addColumn("ID Cuenta"); // Cambiado a "ID Cuenta"
        transaccionesTableModel.addColumn("Fecha y Hora");
        transaccionesTableModel.addColumn("Detalle");
        transaccionesTableModel.addColumn("Monto Debitado");
        transaccionesTableModel.addColumn("Monto Acreditado");
        transaccionesTableModel.addColumn("Saldo Disponible");
        transaccionesTable.setModel(transaccionesTableModel);

        JScrollPane scrollPane = new JScrollPane(transaccionesTable);

        // Configurar el layout
        setLayout(new BorderLayout());
        JPanel panel = new JPanel();
        panel.add(new JLabel("ID de la Cuenta:"));
        panel.add(idCuentaField);
        panel.add(mostrarButton);
        add(panel, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);

        // Agregar listener al botón de "Mostrar Historial"
        mostrarButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String idCuenta = idCuentaField.getText().trim(); // Obtener el ID de la cuenta y eliminar espacios en blanco
                if (!idCuenta.isEmpty()) {
                    List<Transaccion> transacciones = controller.obtenerTransacciones(idCuenta);
                    double saldoInicial = controller.obtenerSaldoInicial(idCuenta); // Obtener el saldo inicial (siempre 0)
                    if (transacciones != null && !transacciones.isEmpty()) {
                        mostrarTransacciones(transacciones, saldoInicial, idCuenta); // Mostrar las transacciones en la tabla
                    } else {
                        JOptionPane.showMessageDialog(Historial.this, "No se encontraron transacciones para la cuenta.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(Historial.this, "Ingrese un ID de cuenta válido.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        // Configurar la ventana
        setTitle("Historial de Transacciones");
        setSize(800, 400);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
    }

    // Método para mostrar las transacciones en la tabla
    private void mostrarTransacciones(List<Transaccion> transacciones, double saldoInicial, String idCuenta) {
        transaccionesTableModel.setRowCount(0); // Limpiar la tabla
        double saldoDisponible = 0; // Iniciar con un saldo inicial de 0

        for (Transaccion transaccion : transacciones) {
            saldoDisponible += (transaccion.getMontoAcreditado() - transaccion.getMontoDebitado());
            transaccionesTableModel.addRow(new Object[]{
                idCuenta, 
                transaccion.getFechaHora(),
                transaccion.getDetalle(),
                transaccion.getMontoDebitado(),
                transaccion.getMontoAcreditado(),
                saldoDisponible
            });
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // </editor-fold>
@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 770, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 588, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
